/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-03-03 03:50:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.or.ddit.enumpkg.BrowserInfo;
import java.util.LinkedHashMap;
import java.util.Map.Entry;
import java.util.Map;
import java.util.HashMap;
import java.util.Enumeration;

public final class userAgent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.LinkedHashMap");
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.Map.Entry");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("kr.or.ddit.enumpkg.BrowserInfo");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>04/userAgent.jsp</title>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/js/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t");

		/* 
		Enumeration<String> headerNames = request.getAttributeNames();
		
		1. request객체에 들어있는 모든 Header의 이름들을 Enumeration객체에 담고
		2. while문을 수행하면서 name과 value값을 뽑아서 td에 넣어준다.
		while(headerNames.hasMoreElements()){
			String name = headerNames.nextElement();
			String value = request.getHeader(name);
		} */
		
		//String userAgent = request.getHeader("user-agent");
		
		//String res = BrowserInfo.findBrowser(userAgent);
		// 모든 문자를 대문자처리
		
		
		
		/* Map<String, String> browserInfo = new LinkedHashMap<>();
		browserInfo.put("EDG", "엣지");
		browserInfo.put("CHROME", "크롬");
		browserInfo.put("SAFARI", "사파리"); */
		
/* 		for(Entry<String,String> entry :browserInfo.entrySet()){
			String key = entry.getKey();
			if(userAgent.contains(key)){
				res = entry.getValue();
				break;
			}
		} */
		
		
		/* if(userAgent.contains("EDG")){
			res = "엣지";
		}else if(userAgent.contains("CHROME")){
			res = "크롬";						
		}else if(userAgent.contains("SAFARI")){
			res = "사파리";	
		} */
		
		//String message = String.format("당신의 브라우저는 %s 입니다.", res);
		
		
		
		
		/* 
		 	1. 비동기 요청 발생(/04/findBrowser)
			2. 응답 데이터 JSON 형식(browser 포르퍼티)
			3. 응답이 전송되면, alert 창 
		*/
	
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t$(\"#clickBtn\").on(\"click\", function(event){\r\n");
      out.write("\t\t\t// 기존의 이벤트를 삭제하는 과정\r\n");
      out.write("\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t\tconst PTRN = \"당신의 브라우저는 %s 입니다.\";\r\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl : \"");
      out.print(request.getContextPath());
      out.write("/04/findBrowser\",\r\n");
      out.write("\t\t\t\tmethod : \"get\",\r\n");
      out.write("\t\t\t\tsuccess : function(res) {\r\n");
      out.write("\t\t\t\t\tlet message = PTRN.replace(\"%s\", res.browser)\r\n");
      out.write("\t\t\t\t\talert(message);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\terror : function(jqXHR, textStatus, errorThrown) {\r\n");
      out.write("\t\t\t\t\tconsole.log(jqXHR);\r\n");
      out.write("\t\t\t\t\tconsole.log(textStatus);\r\n");
      out.write("\t\t\t\t\tconsole.log(errorThrown);\r\n");
      out.write("\t\t\t\t},\r\n");
      out.write("\t\t\t\tdataType : \"JSON\"\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t})\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<a href=\"#\" id=\"clickBtn\">클릭</a>\r\n");
      out.write("<!-- \r\n");
      out.write("enum 문법 활용 추천\r\n");
      out.write("사용자의 브라우저 종류를 확인하고\r\n");
      out.write("\"당신의 브라우저는 크롬[사파리, 엣지] 입니다.\"\r\n");
      out.write("와 같은 형태의 메시지를 alert 창으로 출력. \r\n");
      out.write("-->\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
