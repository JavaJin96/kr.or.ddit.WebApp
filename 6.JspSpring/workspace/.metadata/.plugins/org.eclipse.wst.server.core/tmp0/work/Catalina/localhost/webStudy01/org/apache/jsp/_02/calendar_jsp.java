/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2022-02-28 00:01:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._02;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>jsp를 이용한 달력</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

Calendar cr = Calendar.getInstance();
int year = cr.get(Calendar.YEAR);
int month = cr.get(Calendar.MONTH);
int date = cr.get(Calendar.DATE);
String today = year + ":" +(month+1)+ ":"+date; // 오늘 날짜
// 1일부터 시작하는 달력을 만들기 위해 오늘의 연도,월을 셋팅하고 일부분은 1을 셋팅한다.
cr.set(year, month, 1);
 
// 셋팅한 날짜로 부터 아래 내용을 구함
 
// 해당 월의 첫날를 구함
int startDate = cr.getMinimum(Calendar.DATE);
 
// 해당 월의 마지막 날을 구함
int endDate = cr.getActualMaximum(Calendar.DATE);
 
// 1일의 요일을 구함
int startDay = cr.get(Calendar.DAY_OF_WEEK);
int count = 0;

      out.write("\r\n");
      out.write("<div align=\"center\">\r\n");
      out.write("<h2 align=\"center\"><a>&lt;&lt;&lt;&lt;</a>");
      out.print(year );
      out.write(',');
      out.write(' ');
      out.print(month+1 );
      out.write("<a>&gt;&gt;&gt;&gt;</a></h2>\r\n");
      out.write("<br>\r\n");
      out.write("YEAR : <input type='text' value='");
      out.print(year);
      out.write("'>\r\n");
      out.write("MONTH : <select>\r\n");
      out.write("\t<option selected=\"selected\">");
      out.print(month+1 );
      out.write("</option>\r\n");
      out.write("\t<option>1</option>\r\n");
      out.write("\t<option>2</option>\r\n");
      out.write("\t<option>3</option>\r\n");
      out.write("\t<option>4</option>\r\n");
      out.write("\t<option>5</option>\r\n");
      out.write("\t<option>6</option>\r\n");
      out.write("\t<option>7</option>\r\n");
      out.write("\t<option>8</option>\r\n");
      out.write("\t<option>9</option>\r\n");
      out.write("\t<option>10</option>\r\n");
      out.write("\t<option>11</option>\r\n");
      out.write("\t<option>12</option>\r\n");
      out.write("</select>\r\n");
      out.write("<select>\r\n");
      out.write("\t<option>Locale</option>\r\n");
      out.write("</select>\r\n");
      out.write("<select>\r\n");
      out.write("\t<option>Timezone</option>\r\n");
      out.write("</select>\r\n");
      out.write("</div>\r\n");
      out.write("<table width=\"1100\" cellpadding=\"2\" cellspacing=\"0\" border=\"1\" align=\"center\">\r\n");
      out.write(" <tr height=\"70\">\r\n");
      out.write("  <td><font size=\"2\">일</font></td>\r\n");
      out.write("  <td><font size=\"2\">월</font></td>\r\n");
      out.write("  <td><font size=\"2\">화</font></td>\r\n");
      out.write("  <td><font size=\"2\">수</font></td>\r\n");
      out.write("  <td><font size=\"2\">목</font></td>\r\n");
      out.write("  <td><font size=\"2\">금</font></td>\r\n");
      out.write("  <td><font size=\"2\">토</font></td>\r\n");
      out.write(" </tr>\r\n");
      out.write(" <tr height=\"70\">\r\n");

for (int i=1;i<startDay;i++){
 count++;

      out.write("\r\n");
      out.write("        <td>&nbsp;</td>\r\n");

}
for (int i=startDate;i<=endDate;i++){
 String bgcolor = (today.equals(year+":"+(month+1)+":"+i))? "#CCCCCC" : "#FFFFFF";
 String color = (count%7 == 0 || count%7 == 6)? "red" : "black";
 count++;

      out.write("\r\n");
      out.write("  <td bgcolor=\"");
      out.print(bgcolor );
      out.write("\"><font size=\"2\" color=");
      out.print(color );
      out.write('>');
      out.print(i );
      out.write("</font></td>\r\n");

if(count%7 == 0 && i < endDate){

      out.write("\r\n");
      out.write("</tr>\r\n");
      out.write("<tr height=\"70\">\r\n");

  }
}
while(count%7 != 0){

      out.write("\r\n");
      out.write("<td>&nbsp;</td>\r\n");

count++;
 }

      out.write("\r\n");
      out.write("</tr> \r\n");
      out.write("</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
